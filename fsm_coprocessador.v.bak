module fsm_coprocessador (
    input clk,
    input reset,
    input [3:0] opcode,
    input start_instr,
    output reg we,
    output reg re,
    output reg start_calc,
    output reg [1:0] sel_operacao,
    output reg [2:0] estado
);

    // Estados
    parameter IDLE      = 3'b000;
    parameter WRITE_MEM = 3'b001;
    parameter READ_MEM  = 3'b010;
    parameter EXEC_CALC = 3'b011;
    parameter WAIT_CALC = 3'b100;
    parameter WRITE_RES = 3'b101;
    parameter FIM       = 3'b110;

    reg [2:0] prox_estado;

    always @(posedge clk or posedge reset) begin
        if (reset)
            estado <= IDLE;
        else
            estado <= prox_estado;
    end

    always @(*) begin
        // valores padrÃ£o
        we = 0;
        re = 0;
        start_calc = 0;
        sel_operacao = 2'b00;
        prox_estado = estado;

        case (estado)
            IDLE: begin
                if (start_instr) begin
                    case (opcode)
                        4'b0001: prox_estado = WRITE_MEM;
                        4'b0010: begin sel_operacao = 2'b00; prox_estado = READ_MEM; end // soma
                        4'b0011: begin sel_operacao = 2'b01; prox_estado = READ_MEM; end // sub
                        4'b0100: begin sel_operacao = 2'b10; prox_estado = READ_MEM; end // oposta
                        default: prox_estado = IDLE;
                    endcase
                end
            end

            WRITE_MEM: begin
                we = 1;
                prox_estado = FIM;
            end

            READ_MEM: begin
                re = 1;
                prox_estado = EXEC_CALC;
            end

            EXEC_CALC: begin
                start_calc = 1;
                prox_estado = WAIT_CALC;
            end

            WAIT_CALC: begin
                prox_estado = WRITE_RES; // simulado, sem verificar done ainda
            end

            WRITE_RES: begin
                we = 1;
                prox_estado = FIM;
            end

            FIM: begin
                prox_estado = IDLE;
            end
        endcase
    end
endmodule
